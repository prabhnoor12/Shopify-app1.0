"""Add role_id to users table

Revision ID: f57475222542
Revises: 626513867fa1
Create Date: 2025-09-10 19:21:11.208169

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f57475222542"
down_revision: Union[str, Sequence[str], None] = "626513867fa1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "role_permissions",
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"], ["permissions.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
    )
    op.create_table(
        "scheduled_updates",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("update_type", sa.String(), nullable=False),
        sa.Column("target_id", sa.Integer(), nullable=False),
        sa.Column("new_value", sa.Text(), nullable=False),
        sa.Column("scheduled_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_executed", sa.Boolean(), nullable=True),
        sa.Column("executed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_scheduled_updates_id"), "scheduled_updates", ["id"], unique=False
    )
    op.create_table(
        "user_feedback",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("original_text", sa.Text(), nullable=False),
        sa.Column("edited_text", sa.Text(), nullable=True),
        sa.Column(
            "status",
            sa.String(),
            nullable=False,
            comment="Enum: 'accepted', 'edited', 'rejected'",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_feedback_id"), "user_feedback", ["id"], unique=False)
    op.create_index(
        op.f("ix_user_feedback_user_id"), "user_feedback", ["user_id"], unique=False
    )
    op.create_table(
        "user_notification_preferences",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("email_enabled", sa.Boolean(), nullable=True),
        sa.Column("sms_enabled", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_notification_preferences_id"),
        "user_notification_preferences",
        ["id"],
        unique=False,
    )
    op.create_table(
        "task_execution_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("log", sa.Text(), nullable=True),
        sa.Column("executed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["scheduled_tasks.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_task_execution_logs_id"), "task_execution_logs", ["id"], unique=False
    )
    op.drop_table("role_permission_association")
    op.alter_column(
        "brand_voice", "user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_unique_constraint(None, "brand_voice", ["user_id"])
    op.drop_constraint(
        op.f("brand_voice_user_id_fkey"), "brand_voice", type_="foreignkey"
    )
    op.create_foreign_key(None, "brand_voice", "shopify_users", ["user_id"], ["id"])
    op.drop_column("roles", "created_at")
    op.drop_column("roles", "updated_at")
    op.add_column(
        "scheduled_tasks", sa.Column("recurrence_rule", sa.String(), nullable=True)
    )
    op.add_column(
        "scheduled_tasks", sa.Column("parent_task_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(
        None, "scheduled_tasks", "scheduled_tasks", ["parent_task_id"], ["id"]
    )
    op.add_column("shopify_users", sa.Column("user_id", sa.Integer(), nullable=False))
    op.create_index(
        op.f("ix_shopify_users_user_id"), "shopify_users", ["user_id"], unique=True
    )
    op.create_foreign_key(
        None, "shopify_users", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    op.add_column("team_members", sa.Column("invited_at", sa.DateTime(), nullable=True))
    op.add_column(
        "team_members", sa.Column("responded_at", sa.DateTime(), nullable=True)
    )
    op.add_column("users", sa.Column("role_id", sa.Integer(), nullable=True))
    op.create_foreign_key(None, "users", "roles", ["role_id"], ["id"])
    op.drop_column("users", "role")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users", sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.drop_constraint(None, "users", type_="foreignkey")
    op.drop_column("users", "role_id")
    op.drop_column("team_members", "responded_at")
    op.drop_column("team_members", "invited_at")
    op.drop_constraint(None, "shopify_users", type_="foreignkey")
    op.drop_index(op.f("ix_shopify_users_user_id"), table_name="shopify_users")
    op.drop_column("shopify_users", "user_id")
    op.drop_constraint(None, "scheduled_tasks", type_="foreignkey")
    op.drop_column("scheduled_tasks", "parent_task_id")
    op.drop_column("scheduled_tasks", "recurrence_rule")
    op.add_column(
        "roles",
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "roles",
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "brand_voice", type_="foreignkey")
    op.create_foreign_key(
        op.f("brand_voice_user_id_fkey"), "brand_voice", "users", ["user_id"], ["id"]
    )
    op.drop_constraint(None, "brand_voice", type_="unique")
    op.alter_column("brand_voice", "user_id", existing_type=sa.INTEGER(), nullable=True)
    op.create_table(
        "role_permission_association",
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("permission_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            name=op.f("role_permission_association_permission_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
            name=op.f("role_permission_association_role_id_fkey"),
        ),
        sa.PrimaryKeyConstraint(
            "role_id", "permission_id", name=op.f("role_permission_association_pkey")
        ),
    )
    op.drop_index(op.f("ix_task_execution_logs_id"), table_name="task_execution_logs")
    op.drop_table("task_execution_logs")
    op.drop_index(
        op.f("ix_user_notification_preferences_id"),
        table_name="user_notification_preferences",
    )
    op.drop_table("user_notification_preferences")
    op.drop_index(op.f("ix_user_feedback_user_id"), table_name="user_feedback")
    op.drop_index(op.f("ix_user_feedback_id"), table_name="user_feedback")
    op.drop_table("user_feedback")
    op.drop_index(op.f("ix_scheduled_updates_id"), table_name="scheduled_updates")
    op.drop_table("scheduled_updates")
    op.drop_table("role_permissions")
    # ### end Alembic commands ###
