"""Add phone_number to users table

Revision ID: f46e57efcdac
Revises: e5a5a4e3e2d1
Create Date: 2025-09-06 14:31:47.347265

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f46e57efcdac"
down_revision: Union[str, Sequence[str], None] = "e5a5a4e3e2d1"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    teammemberstatus_enum = postgresql.ENUM(
        "PENDING", "ACCEPTED", "DECLINED", name="teammemberstatus"
    )
    teammemberstatus_enum.create(op.get_bind())
    op.create_table(
        "learning_sources",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "source_type",
            sa.String(),
            nullable=False,
            comment="Type of source, e.g., 'text', 'url', 'file'.",
        ),
        sa.Column(
            "content",
            sa.Text(),
            nullable=True,
            comment="Raw text content, if applicable.",
        ),
        sa.Column(
            "source_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Stores metadata like URL, filename, or processing status.",
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_learning_sources_id"), "learning_sources", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_learning_sources_user_id"),
        "learning_sources",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "memory_vault_entries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "content",
            sa.Text(),
            nullable=False,
            comment="A specific fact or piece of information for the AI to remember.",
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_memory_vault_entries_id"), "memory_vault_entries", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_memory_vault_entries_user_id"),
        "memory_vault_entries",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "coupon_usage_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("coupon_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("order_id", sa.Integer(), nullable=True),
        sa.Column(
            "used_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["coupon_id"],
            ["coupons.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_coupon_usage_logs_id"), "coupon_usage_logs", ["id"], unique=False
    )
    op.create_table(
        "custom_roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("team_id", sa.Integer(), nullable=True),
        sa.Column("parent_role_id", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["parent_role_id"],
            ["custom_roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_custom_roles_id"), "custom_roles", ["id"], unique=False)
    op.create_index(
        op.f("ix_custom_roles_name"), "custom_roles", ["name"], unique=False
    )
    op.create_table(
        "custom_role_permission_association",
        sa.Column("custom_role_id", sa.Integer(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["custom_role_id"],
            ["custom_roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.PrimaryKeyConstraint("custom_role_id", "permission_id"),
    )
    op.drop_index(op.f("ix_scheduled_updates_id"), table_name="scheduled_updates")
    op.drop_table("scheduled_updates")
    op.drop_index(
        op.f("ix_scheduled_ab_test_rotations_id"),
        table_name="scheduled_ab_test_rotations",
    )
    op.drop_table("scheduled_ab_test_rotations")
    op.create_index(op.f("ix_activity_logs_id"), "activity_logs", ["id"], unique=False)
    op.alter_column(
        "audit_logs",
        "details",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.add_column("brand_voice", sa.Column("tone_of_voice", sa.String(), nullable=True))
    op.add_column(
        "brand_voice", sa.Column("vocabulary_preferences", sa.JSON(), nullable=True)
    )
    op.add_column("brand_voice", sa.Column("industry_jargon", sa.JSON(), nullable=True))
    op.add_column("brand_voice", sa.Column("banned_words", sa.JSON(), nullable=True))
    op.add_column("brand_voice", sa.Column("description", sa.Text(), nullable=True))
    op.drop_constraint(
        op.f("brand_voice_user_id_fkey"), "brand_voice", type_="foreignkey"
    )
    op.create_foreign_key(None, "brand_voice", "users", ["user_id"], ["id"])
    op.drop_column("brand_voice", "guidelines")
    op.drop_column("brand_voice", "example")
    op.add_column("coupons", sa.Column("discount_type", sa.String(), nullable=False))
    op.add_column("coupons", sa.Column("value", sa.Float(), nullable=False))
    op.add_column("coupons", sa.Column("min_spend", sa.Float(), nullable=True))
    op.add_column("coupons", sa.Column("max_discount", sa.Float(), nullable=True))
    op.add_column(
        "coupons",
        sa.Column(
            "start_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "coupons", sa.Column("end_date", sa.DateTime(timezone=True), nullable=False)
    )
    op.add_column("coupons", sa.Column("usage_limit", sa.Integer(), nullable=True))
    op.add_column("coupons", sa.Column("per_user_limit", sa.Integer(), nullable=True))
    op.add_column("coupons", sa.Column("used_count", sa.Integer(), nullable=False))
    op.drop_constraint(op.f("coupons_used_by_fkey"), "coupons", type_="foreignkey")
    op.drop_column("coupons", "expires_at")
    op.drop_column("coupons", "used_by")
    op.drop_column("coupons", "used_at")
    op.drop_column("coupons", "discount_percent")
    op.drop_column("coupons", "used")
    op.add_column("team_members", sa.Column("role_id", sa.Integer(), nullable=False))
    op.add_column(
        "team_members",
        sa.Column(
            "status",
            sa.Enum("PENDING", "ACCEPTED", "DECLINED", name="teammemberstatus"),
            nullable=True,
        ),
    )
    op.add_column("team_members", sa.Column("start_date", sa.DateTime(), nullable=True))
    op.add_column("team_members", sa.Column("end_date", sa.DateTime(), nullable=True))
    op.add_column("team_members", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("team_members", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.create_foreign_key(None, "team_members", "roles", ["role_id"], ["id"])
    op.drop_column("team_members", "role")
    op.add_column("teams", sa.Column("description", sa.String(), nullable=True))
    op.add_column("teams", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("teams", sa.Column("updated_at", sa.DateTime(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("teams", "updated_at")
    op.drop_column("teams", "created_at")
    op.drop_column("teams", "description")
    op.add_column(
        "team_members",
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "team_members", type_="foreignkey")
    op.drop_column("team_members", "updated_at")
    op.drop_column("team_members", "created_at")
    op.drop_column("team_members", "end_date")
    op.drop_column("team_members", "start_date")
    op.drop_column("team_members", "status")
    op.drop_column("team_members", "role_id")
    op.add_column(
        "coupons", sa.Column("used", sa.BOOLEAN(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "coupons",
        sa.Column(
            "discount_percent",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "coupons",
        sa.Column(
            "used_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "coupons",
        sa.Column("used_by", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "coupons",
        sa.Column(
            "expires_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.create_foreign_key(
        op.f("coupons_used_by_fkey"), "coupons", "users", ["used_by"], ["id"]
    )
    op.drop_column("coupons", "used_count")
    op.drop_column("coupons", "per_user_limit")
    op.drop_column("coupons", "usage_limit")
    op.drop_column("coupons", "end_date")
    op.drop_column("coupons", "start_date")
    op.drop_column("coupons", "max_discount")
    op.drop_column("coupons", "min_spend")
    op.drop_column("coupons", "value")
    op.drop_column("coupons", "discount_type")
    op.add_column(
        "brand_voice",
        sa.Column("example", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "brand_voice",
        sa.Column("guidelines", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "brand_voice", type_="foreignkey")
    op.create_foreign_key(
        op.f("brand_voice_user_id_fkey"),
        "brand_voice",
        "shopify_users",
        ["user_id"],
        ["id"],
    )
    op.drop_column("brand_voice", "description")
    op.drop_column("brand_voice", "banned_words")
    op.drop_column("brand_voice", "industry_jargon")
    op.drop_column("brand_voice", "vocabulary_preferences")
    op.drop_column("brand_voice", "tone_of_voice")
    op.alter_column(
        "audit_logs",
        "details",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.drop_index(op.f("ix_activity_logs_id"), table_name="activity_logs")
    op.create_table(
        "scheduled_ab_test_rotations",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("ab_test_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "next_rotation_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("executed", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "last_executed_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["ab_test_id"],
            ["ab_tests.id"],
            name=op.f("scheduled_ab_test_rotations_ab_test_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["shopify_users.id"],
            name=op.f("scheduled_ab_test_rotations_user_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("scheduled_ab_test_rotations_pkey")),
    )
    op.create_index(
        op.f("ix_scheduled_ab_test_rotations_id"),
        "scheduled_ab_test_rotations",
        ["id"],
        unique=False,
    )
    op.create_table(
        "scheduled_updates",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("product_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("new_description", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "scheduled_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("executed", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "executed_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("cancelled", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
            name=op.f("scheduled_updates_product_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("scheduled_updates_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("scheduled_updates_pkey")),
    )
    op.create_index(
        op.f("ix_scheduled_updates_id"), "scheduled_updates", ["id"], unique=False
    )
    op.drop_table("custom_role_permission_association")
    op.drop_index(op.f("ix_custom_roles_name"), table_name="custom_roles")
    op.drop_index(op.f("ix_custom_roles_id"), table_name="custom_roles")
    op.drop_table("custom_roles")
    op.drop_index(op.f("ix_coupon_usage_logs_id"), table_name="coupon_usage_logs")
    op.drop_table("coupon_usage_logs")
    op.drop_index(
        op.f("ix_memory_vault_entries_user_id"), table_name="memory_vault_entries"
    )
    op.drop_index(op.f("ix_memory_vault_entries_id"), table_name="memory_vault_entries")
    op.drop_table("memory_vault_entries")
    op.drop_index(op.f("ix_learning_sources_user_id"), table_name="learning_sources")
    op.drop_index(op.f("ix_learning_sources_id"), table_name="learning_sources")
    op.drop_table("learning_sources")
    teammemberstatus_enum = postgresql.ENUM(
        "PENDING", "ACCEPTED", "DECLINED", name="teammemberstatus"
    )
    teammemberstatus_enum.drop(op.get_bind())
    # ### end Alembic commands ###
    # ### end Alembic commands ###
