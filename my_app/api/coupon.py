from fastapi import APIRouter, Depends, HTTPException
from typing import List, Optional
from pydantic import BaseModel
from sqlalchemy.orm import Session

from ..services.coupon_service import CouponService
from ..database import get_db
from ..schemas.coupon import CouponCreate, CouponResponse
from ..exceptions import (
    CouponNotFoundError,
    CouponExpiredError,
    CouponAlreadyUsedError,
    InvalidCouponDataError,
    ValidationException,
)

router = APIRouter(prefix="/coupons", tags=["coupons"])


class CouponGenerateRequest(BaseModel):
    inviter_user_id: int
    discount_type: str
    value: float
    min_spend: Optional[float] = None
    max_discount: Optional[float] = None
    expires_in_days: int = 30
    usage_limit: Optional[int] = None
    per_user_limit: Optional[int] = None


class CouponRedeemRequest(BaseModel):
    code: str
    user_id: int
    order_id: Optional[int] = None


@router.post("/generate", response_model=CouponResponse)
def generate_coupon(coupon_data: CouponCreate, db: Session = Depends(get_db)):
    """
    Generate a unique coupon code for inviting others.
    """
    coupon_service = CouponService(db)
    try:
        return coupon_service.generate_coupon(coupon_data)
    except InvalidCouponDataError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


@router.get("/validate/{code}", response_model=CouponResponse)
def validate_coupon(
    code: str,
    user_id: Optional[int] = None,
    current_spend: Optional[float] = None,
    db: Session = Depends(get_db),
):
    """
    Validate a coupon code.
    """
    coupon_service = CouponService(db)
    try:
        coupon = coupon_service.validate_coupon(code, user_id, current_spend)
        return coupon
    except (
        CouponNotFoundError,
        CouponExpiredError,
        CouponAlreadyUsedError,
        ValidationException,
    ) as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


@router.post("/redeem", response_model=CouponResponse)
def redeem_coupon(request: CouponRedeemRequest, db: Session = Depends(get_db)):
    """
    Redeem a coupon for a new user.
    """
    coupon_service = CouponService(db)
    try:
        coupon = coupon_service.redeem_coupon(
            request.code, request.user_id, request.order_id
        )
        return coupon
    except (
        CouponNotFoundError,
        CouponExpiredError,
        CouponAlreadyUsedError,
        ValidationException,
    ) as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


@router.get("/user/{user_id}", response_model=List[CouponResponse])
def get_coupons_by_user(user_id: int, db: Session = Depends(get_db)):
    """
    List all coupons generated by a user.
    """
    coupon_service = CouponService(db)
    try:
        return coupon_service.get_coupons_by_user(user_id)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")
